// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: repository_sync_service.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RepositorySyncService_ReportSavedFileChunk_FullMethodName = "/RepositorySyncService/ReportSavedFileChunk"
)

// RepositorySyncServiceClient is the client API for RepositorySyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositorySyncServiceClient interface {
	ReportSavedFileChunk(ctx context.Context, opts ...grpc.CallOption) (RepositorySyncService_ReportSavedFileChunkClient, error)
}

type repositorySyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositorySyncServiceClient(cc grpc.ClientConnInterface) RepositorySyncServiceClient {
	return &repositorySyncServiceClient{cc}
}

func (c *repositorySyncServiceClient) ReportSavedFileChunk(ctx context.Context, opts ...grpc.CallOption) (RepositorySyncService_ReportSavedFileChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositorySyncService_ServiceDesc.Streams[0], RepositorySyncService_ReportSavedFileChunk_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositorySyncServiceReportSavedFileChunkClient{stream}
	return x, nil
}

type RepositorySyncService_ReportSavedFileChunkClient interface {
	Send(*ReportSavedFileChunkRequest) error
	Recv() (*ReportSavedFileChunkResponse, error)
	grpc.ClientStream
}

type repositorySyncServiceReportSavedFileChunkClient struct {
	grpc.ClientStream
}

func (x *repositorySyncServiceReportSavedFileChunkClient) Send(m *ReportSavedFileChunkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *repositorySyncServiceReportSavedFileChunkClient) Recv() (*ReportSavedFileChunkResponse, error) {
	m := new(ReportSavedFileChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepositorySyncServiceServer is the server API for RepositorySyncService service.
// All implementations must embed UnimplementedRepositorySyncServiceServer
// for forward compatibility
type RepositorySyncServiceServer interface {
	ReportSavedFileChunk(RepositorySyncService_ReportSavedFileChunkServer) error
	mustEmbedUnimplementedRepositorySyncServiceServer()
}

// UnimplementedRepositorySyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepositorySyncServiceServer struct {
}

func (UnimplementedRepositorySyncServiceServer) ReportSavedFileChunk(RepositorySyncService_ReportSavedFileChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportSavedFileChunk not implemented")
}
func (UnimplementedRepositorySyncServiceServer) mustEmbedUnimplementedRepositorySyncServiceServer() {}

// UnsafeRepositorySyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositorySyncServiceServer will
// result in compilation errors.
type UnsafeRepositorySyncServiceServer interface {
	mustEmbedUnimplementedRepositorySyncServiceServer()
}

func RegisterRepositorySyncServiceServer(s grpc.ServiceRegistrar, srv RepositorySyncServiceServer) {
	s.RegisterService(&RepositorySyncService_ServiceDesc, srv)
}

func _RepositorySyncService_ReportSavedFileChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RepositorySyncServiceServer).ReportSavedFileChunk(&repositorySyncServiceReportSavedFileChunkServer{stream})
}

type RepositorySyncService_ReportSavedFileChunkServer interface {
	Send(*ReportSavedFileChunkResponse) error
	Recv() (*ReportSavedFileChunkRequest, error)
	grpc.ServerStream
}

type repositorySyncServiceReportSavedFileChunkServer struct {
	grpc.ServerStream
}

func (x *repositorySyncServiceReportSavedFileChunkServer) Send(m *ReportSavedFileChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *repositorySyncServiceReportSavedFileChunkServer) Recv() (*ReportSavedFileChunkRequest, error) {
	m := new(ReportSavedFileChunkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepositorySyncService_ServiceDesc is the grpc.ServiceDesc for RepositorySyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositorySyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RepositorySyncService",
	HandlerType: (*RepositorySyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportSavedFileChunk",
			Handler:       _RepositorySyncService_ReportSavedFileChunk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "repository_sync_service.proto",
}
