// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: repository_sync_service.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RepositorySyncService_SyncFileChunks_FullMethodName = "/RepositorySyncService/SyncFileChunks"
)

// RepositorySyncServiceClient is the client API for RepositorySyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositorySyncServiceClient interface {
	SyncFileChunks(ctx context.Context, in *FileChunks, opts ...grpc.CallOption) (*FileChunkStatuses, error)
}

type repositorySyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositorySyncServiceClient(cc grpc.ClientConnInterface) RepositorySyncServiceClient {
	return &repositorySyncServiceClient{cc}
}

func (c *repositorySyncServiceClient) SyncFileChunks(ctx context.Context, in *FileChunks, opts ...grpc.CallOption) (*FileChunkStatuses, error) {
	out := new(FileChunkStatuses)
	err := c.cc.Invoke(ctx, RepositorySyncService_SyncFileChunks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositorySyncServiceServer is the server API for RepositorySyncService service.
// All implementations must embed UnimplementedRepositorySyncServiceServer
// for forward compatibility
type RepositorySyncServiceServer interface {
	SyncFileChunks(context.Context, *FileChunks) (*FileChunkStatuses, error)
	mustEmbedUnimplementedRepositorySyncServiceServer()
}

// UnimplementedRepositorySyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepositorySyncServiceServer struct {
}

func (UnimplementedRepositorySyncServiceServer) SyncFileChunks(context.Context, *FileChunks) (*FileChunkStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFileChunks not implemented")
}
func (UnimplementedRepositorySyncServiceServer) mustEmbedUnimplementedRepositorySyncServiceServer() {}

// UnsafeRepositorySyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositorySyncServiceServer will
// result in compilation errors.
type UnsafeRepositorySyncServiceServer interface {
	mustEmbedUnimplementedRepositorySyncServiceServer()
}

func RegisterRepositorySyncServiceServer(s grpc.ServiceRegistrar, srv RepositorySyncServiceServer) {
	s.RegisterService(&RepositorySyncService_ServiceDesc, srv)
}

func _RepositorySyncService_SyncFileChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChunks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositorySyncServiceServer).SyncFileChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositorySyncService_SyncFileChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositorySyncServiceServer).SyncFileChunks(ctx, req.(*FileChunks))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositorySyncService_ServiceDesc is the grpc.ServiceDesc for RepositorySyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositorySyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RepositorySyncService",
	HandlerType: (*RepositorySyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncFileChunks",
			Handler:    _RepositorySyncService_SyncFileChunks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repository_sync_service.proto",
}
