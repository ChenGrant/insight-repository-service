// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: protobufs/repository_lock.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RepositoryLock_HandleSaveRawSuccess_FullMethodName = "/protobufs.RepositoryLock/HandleSaveRawSuccess"
)

// RepositoryLockClient is the client API for RepositoryLock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryLockClient interface {
	HandleSaveRawSuccess(ctx context.Context, opts ...grpc.CallOption) (RepositoryLock_HandleSaveRawSuccessClient, error)
}

type repositoryLockClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryLockClient(cc grpc.ClientConnInterface) RepositoryLockClient {
	return &repositoryLockClient{cc}
}

func (c *repositoryLockClient) HandleSaveRawSuccess(ctx context.Context, opts ...grpc.CallOption) (RepositoryLock_HandleSaveRawSuccessClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepositoryLock_ServiceDesc.Streams[0], RepositoryLock_HandleSaveRawSuccess_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryLockHandleSaveRawSuccessClient{stream}
	return x, nil
}

type RepositoryLock_HandleSaveRawSuccessClient interface {
	Send(*ReportSaveRawSuccessRequest) error
	Recv() (*ReportSaveRawSuccessResponse, error)
	grpc.ClientStream
}

type repositoryLockHandleSaveRawSuccessClient struct {
	grpc.ClientStream
}

func (x *repositoryLockHandleSaveRawSuccessClient) Send(m *ReportSaveRawSuccessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *repositoryLockHandleSaveRawSuccessClient) Recv() (*ReportSaveRawSuccessResponse, error) {
	m := new(ReportSaveRawSuccessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepositoryLockServer is the server API for RepositoryLock service.
// All implementations must embed UnimplementedRepositoryLockServer
// for forward compatibility
type RepositoryLockServer interface {
	HandleSaveRawSuccess(RepositoryLock_HandleSaveRawSuccessServer) error
	mustEmbedUnimplementedRepositoryLockServer()
}

// UnimplementedRepositoryLockServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryLockServer struct {
}

func (UnimplementedRepositoryLockServer) HandleSaveRawSuccess(RepositoryLock_HandleSaveRawSuccessServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleSaveRawSuccess not implemented")
}
func (UnimplementedRepositoryLockServer) mustEmbedUnimplementedRepositoryLockServer() {}

// UnsafeRepositoryLockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryLockServer will
// result in compilation errors.
type UnsafeRepositoryLockServer interface {
	mustEmbedUnimplementedRepositoryLockServer()
}

func RegisterRepositoryLockServer(s grpc.ServiceRegistrar, srv RepositoryLockServer) {
	s.RegisterService(&RepositoryLock_ServiceDesc, srv)
}

func _RepositoryLock_HandleSaveRawSuccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RepositoryLockServer).HandleSaveRawSuccess(&repositoryLockHandleSaveRawSuccessServer{stream})
}

type RepositoryLock_HandleSaveRawSuccessServer interface {
	Send(*ReportSaveRawSuccessResponse) error
	Recv() (*ReportSaveRawSuccessRequest, error)
	grpc.ServerStream
}

type repositoryLockHandleSaveRawSuccessServer struct {
	grpc.ServerStream
}

func (x *repositoryLockHandleSaveRawSuccessServer) Send(m *ReportSaveRawSuccessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *repositoryLockHandleSaveRawSuccessServer) Recv() (*ReportSaveRawSuccessRequest, error) {
	m := new(ReportSaveRawSuccessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepositoryLock_ServiceDesc is the grpc.ServiceDesc for RepositoryLock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryLock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.RepositoryLock",
	HandlerType: (*RepositoryLockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleSaveRawSuccess",
			Handler:       _RepositoryLock_HandleSaveRawSuccess_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobufs/repository_lock.proto",
}
